class Task < ActiveRecord::Base
  validates :name, :length => {:in => 1..100}
  validates :context, :length => {:in => 1..50}
  validates :notes, :length => {:in => 1..200}
  validate :duedate_validation
  
  before_save :downcase_fields
  
  has_many :comments
  belongs_to :user
  acts_as_taggable
  
  
  def downcase_fields
    self.name.downcase
    self.context.downcase
    self.tag_list.map{|t| t.downcase}
  end

  def self.search(search, current_user_id)
    if search
      where("user_id=? AND name LIKE ?",current_user_id, "%#{search}%")
    else
      where("user_id=?",current_user_id)
    end
  end

  def self.awesome_search_result(search, current_user_id, sort_column, sort_direction)
    if search
      where("user_id=? AND name LIKE ?",current_user_id, "%#{search}%").order(sort_column+" "+sort_direction)
    else
      where("user_id=?",current_user_id).order(sort_column+" "+sort_direction)
    end
  end
  
  protected
  def duedate_validation
    if duedate.blank? || duedate < Date.today
      errors.add(:duedate, "is invalid")
    end
  end
end

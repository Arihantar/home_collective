class ItemsController < ApplicationController
  before_filter :authenticate_user!
  helper_method :sort_column, :sort_direction
  # GET /items
  # GET /items.json
  def index
    @items = Item.search(params[:search]).where("user_id =?", current_user.id).order(sort_column + ' ' + sort_direction).paginate(:per_page => 5, :page => params[:page])
    respond_to do |format|
      format.html # index.html.erb
      format.json { render :json => @items }
    end
  end

  # GET /items/1
  # GET /items/1.json
  def show
    @item = Item.find(params[:id])
    respond_to do |format|
      format.html # show.html.erb
      format.json { render :json => @item }
    end
  end

  # GET /items/new
  # GET /items/new.json
  def new
    @item = Item.new
    respond_to do |format|
      format.html # new.html.erb
      format.json { render :json => @item }
    end
  end

  # GET /items/1/edit
  def edit
    @item = Item.find(params[:id])
  end

  # POST /items
  # POST /items.json
  def create
    @item = Item.new(params[:item])
    @item.user_id = current_user.id
    
    @item.lists.clear
    params[:as_values_lists_names].split(',').each do |list|
      list = list.strip.downcase
      unless list.empty?
        tmp_list = List.find_or_create_by_name("#{list}")
      @item.lists << tmp_list
      end
    end

    # params[:as_values_lists_names].split(',').each do |list|
    # tmp_list = List.find_or_create_by_name("#{list}")
    # @item.lists << tmp_list
    # end
    # lists.each do |list|
    # List.find_or_create_by_name("#{list}")
    # end

    respond_to do |format|
      if @item.save
        format.html { redirect_to @item, :notice => 'Item was successfully created.' }
        format.json { render :json => @item, :status => :created, :location => @item }
      else
        format.html { render :action => "new" }
        format.json { render :json => @item.errors, :status => :unprocessable_entity }
      end
    end
  end

  # PUT /items/1
  # PUT /items/1.json
  def update
    @item = Item.find(params[:id])
    @item.user_id = current_user.id
    # @item.list_name_values = params[:as_values_lists_names]

    # p "======================================="
    # p @item.list_name_values

    @item.lists.clear
    params[:as_values_lists_names].split(',').each do |list|
      list = list.strip.downcase
      unless list.empty?
        tmp_list = List.find_or_create_by_name("#{list}")
      @item.lists << tmp_list
      end
    end

    respond_to do |format|
      if @item.update_attributes(params[:item])
        format.html { redirect_to @item, :notice => 'Item was successfully updated.' }
        format.json { head :ok }
      else
        format.html { render :action => "edit" }
        format.json { render :json => @item.errors, :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /items/1
  # DELETE /items/1.json
  def destroy
    @item = Item.find(params[:id])
    @item.destroy

    respond_to do |format|
      format.html { redirect_to items_url }
      format.json { head :ok }
    end
  end

  def list_name
    @list_names = List.where("name LIKE '%#{params[:q]}%'")
    respond_to do |format|
      format.json {render :json => @list_names}
    end
  end

  private

  def sort_column
    Item.column_names.include?(params[:sort]) ? params[:sort] : "name" 
  end

  def sort_direction
    %w[asc desc].include?(params[:direction]) ?  params[:direction] : "asc"
  end
end
